from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN: Final = '6429389142:AAGz8KMQCG5ycWxDDdGsv90Daj3TeLNCT-o'
BOT_USERNAME: Final = '@newnewwordsbot'

async  def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await  update.message.reply_text('pul ishlashni boshlaymiz ')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await  update.message.reply_text('nohelp for you')

async  def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await  update.message.reply_text(' what you want')


# Responses

def handler_responses(text: str) -> str:
    processed: str = text.lower()

    if 'hello' in processed:
        return 'Hey there!'

    if 'qalesan' in processed:
        return 'norm'

    if 'i love python' in processed:
        return 'Remembr to subscribe!'

    if 'salom' in processed:
        return 'ALIK'

    return 'i do not understand what you wrote...'




async def handler_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type: str = update.message.chat.type
    text: str = update.message.text

    print(f'user ({update.message.chat.id}) in {message_type}: "{text}"')

    if message_type == 'group':
        if BOT_USERNAME in text:
            new_text: str = text.replace(BOT_USERNAME, '').strip()
            response: str = handler_responses(new_text)
        else:
            return
    else:
        response: str = handler_responses(text)

    print('Bot:', response)
    await update.message.reply_text(response)

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')


if __name__ == '__main__':
    print('Starting bot...')
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('custom', custom_command))

    app.add_handler(MessageHandler(filters.TEXT, handler_message))


    app.add_error_handler(error)

    print('polling...')
    app.run_polling(poll_interval=2)
